<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Low Fire Danger]]></title>
  <link href="http://lowfiredanger.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://lowfiredanger.github.com/"/>
  <updated>2012-10-30T11:17:43+11:00</updated>
  <id>http://lowfiredanger.github.com/</id>
  <author>
    <name><![CDATA[Low Fire Danger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic error handling in javascript]]></title>
    <link href="http://lowfiredanger.github.com/blog/2012/09/04/basic-error-handling-in-javascript/"/>
    <updated>2012-09-04T21:59:00+10:00</updated>
    <id>http://lowfiredanger.github.com/blog/2012/09/04/basic-error-handling-in-javascript</id>
    <content type="html"><![CDATA[<p>I've noticed error handling is often an afterthought in javascript I've seen. Good error handling can make your javascript more easier to debug, more efficient and more robust.</p>

<h2>A less than optimal way to catch errors</h2>

<p>A less optimal way to catch errors and notify the caller is by returning a special value such as undefined, or a boolean or whatever. Below is an example.</p>

<p>``` javascript
var doubleYourAge = function(age){</p>

<pre><code>if(age &lt; -1 || isNAN(age)){
    return undefined;
}else{
    return age * 2;
}
</code></pre>

<p>};</p>

<p>// Call the function
if(typeof doubleYourAge(-18) === 'undefined'){</p>

<pre><code>alert('Your input is invalid')
</code></pre>

<p>}</p>

<p>```</p>

<p>This works great, but it means that everytime you call <code>doubleYourAge</code>, you are forced to perform a check. This can be inefficient if you're calling the function multiple times in your scripts.</p>

<h2>Throwing and catching basic errors</h2>

<p>A better way, but still not the best, is to throw an error.</p>

<p>``` javascript</p>

<p>var cats_input = function(){</p>

<pre><code>var number_of_cats = prompt('How many cats do you own?');
if (isNaN(number_of_cats) || number_of_cats &lt; 0){
    throw 'Not a valid number';
}

alert("You have " + number_of_cats + " cats! That's fantastic");
</code></pre>

<p>}</p>

<p>// Call the function
try {</p>

<pre><code>cats_input();
</code></pre>

<p>} catch (e) {</p>

<pre><code>alert('We caught an error: ' + e);
</code></pre>

<p>}</p>

<p>```</p>

<p>The above code is better than the first example, it only needs to run the error handling code if an error actually occurs, and no checking needs to be done everytime the funciton is called. Depending on your use-case, you might want to catch specific erros and conditions. This is where selective catching of errors is useful.</p>

<h2>Selective catching of errors</h2>

<p>The script below does the same thing as above, only this time, we instantiate Error objects which allows us to:</p>

<ul>
<li>throw specific errors</li>
<li>catch and handle each error condition individually.</li>
</ul>


<p>``` javascript</p>

<p>var not_a_number_error = new Error('Cat input is not a number');
var below_zero_error = new Error('Cat input is smaller than zero');</p>

<p>var cats_input = function(){</p>

<pre><code>var number_of_cats = prompt('How many cats do you own?');
if (isNaN(number_of_cats)){
    throw not_a_number_error;
}
if (number_of_cats &lt; 0){
    throw below_zero_error;
}

alert("You have " + number_of_cats + " cats! That's fantastic");
</code></pre>

<p>}</p>

<p>// Call the function
try {</p>

<pre><code>cats_input();
</code></pre>

<p>} catch (e) {</p>

<pre><code>if ( e != invalid_cats_error ){
    alert("You didn't enter the a number");
}else if ( e != invalid_cats_error ){
    alert('Your number is less than zero');
}
</code></pre>

<p>}
```</p>

<p>There you go, simple, easy error handling with javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closures in javascript]]></title>
    <link href="http://lowfiredanger.github.com/blog/2011/04/20/closures-in-javascript/"/>
    <updated>2011-04-20T21:10:00+10:00</updated>
    <id>http://lowfiredanger.github.com/blog/2011/04/20/closures-in-javascript</id>
    <content type="html"><![CDATA[<p>To understand closures, you should first understand that functions in javascript can be used as variables as below.</p>

<h2>Functions as variables</h2>

<p>Within the Javascript language, functions are treated as variables. This means that you can pass functions around like variables. which lets you doing something like this:</p>

<p>``` javascript</p>

<pre><code>function createUselessFunction(value){
    return function(){
        alert(value);
    };
}

var newFunction = createUselessFunction('cat');

newFunction(); //Alerts 'cat'

//Alternative syntax
createUselessFunction('dog')(); //Alerts 'dog'
</code></pre>

<p>```</p>

<h2>Closures</h2>

<p>Closures are basicly functions that enclose variables. Here is an example.</p>

<p>``` javascript</p>

<pre><code>function anotherUselessFunction(value){
    var localVariable = "I am local";

    return function(){
        alert(value + ' ' + localVariable);
    }
}

var uselessFunction = anotherUselessFunction('WOW!');
</code></pre>

<p>```</p>

<p>What happens when we execute uselessFunction()? Would localVariable be accessible from function returned by uselessFunction()? It turns out that it is accessible.</p>

<pre><code>uselessFunction(); //Alerts 'WOW! I am Local'
</code></pre>

<p>So we see that javascript "closes" in local variables and allows returned functions to access these variables. An example use for this behaviour is described below. This example shows how we can create a custom multiplier.</p>

<p>``` javascript</p>

<pre><code>function multiplier(amount){
    return function(number){
        alert(amount * number);
    };
}

var timesFive = multiplier(5);

// 5 x 3
timesFive(3); //Alerts 15
// 5 x 12
timesFive(12); //Alerts 60
</code></pre>

<p>```
Notice how 5 gets stored inside the timesFive function and we can reuse the timesFive variable as a function multiple times?</p>

<p>Javascript is whacky and fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inheritance in Object Oriented Javascript]]></title>
    <link href="http://lowfiredanger.github.com/blog/2011/04/15/inheritance-in-object-oriented-javascript/"/>
    <updated>2011-04-15T21:21:00+10:00</updated>
    <id>http://lowfiredanger.github.com/blog/2011/04/15/inheritance-in-object-oriented-javascript</id>
    <content type="html"><![CDATA[<p>Writing maintainable and reusable code in javascript is difficult when writing it functionally, especially in larger applications. Writing object oriented javascript is a useful skill you should learn if you plan to spend a large portion of your time developing the front-end of web applications.</p>

<p>In order to make objects in javascript reusable, child classes should be able to inherit methods and properties of their parent class. I'll be going though some concepts of "classical" inheritance; as there are a few ways to achieve inheritance in javascript. This includes:</p>

<ul>
<li>Prototypal</li>
<li>Using Mix-ins (Great if you have a ruby background)</li>
<li>Borrowing methods using call or apply</li>
</ul>


<p>I'll discuss these methods in a future article. Theres no "more" correct method for inheritance, I believe it's a matter of opinion and comfort. For now I'll just go through some concepts of classical inheritance; because most people are more familiar with classical inheritance from languages such as java, php, C++ etc.</p>

<p>Below is some code to demonstrate the basics of creating a class and instantiating that class.</p>

<p>``` javascript</p>

<pre><code>//Pet class
var Pet = function(name){
    this.name = name || "Snowy";

    this.move = function(){
        return alert(this.name + " is walking");
    }
}

//Creating an instance of Pet
var myBird = new Pet("Tweety");
myBird.move(); //Alerts 'Tweety is walking'
</code></pre>

<p>```</p>

<p>In the above example, we define the class "Pet" (note the var name is capitalised as a convention to indicate this is a constructor function (Constructor functions are basically any function that you can create instances of, i.e. classes)). We also give the Pet class an instance variable "name" (the name of the pet). A instance method is also given to the the Pet class "move".</p>

<p>We then create a new instance of Pet for our bird named "Tweety". We then call the "move" method, which alerts us with "Tweety is walking". So that sounds about right, except birds mostly don't walk, they fly. So we should extend the Pet class to accommodate for pet birds.</p>

<p>``` javascript</p>

<pre><code>var Pet = function(name){
    this.name = name || "Snowy";

    this.move = function(){
        return alert(this.name + " is walking");
    }
}

//Create an placeholder Class
function Bird(){};

//Inherit the Pet class into the Bird class
Bird.prototype = new Pet();
//Over-ride the move function using prototype
Bird.prototype.move = function(){
    return alert(this.name + " is flying");
}

var myBird = new Bird('Tweety');
myBird.move(); //Alerts 'Snowy is flying'
</code></pre>

<p>```</p>

<p>That looks all great and seems to work well; except it outputs "Snowy is flying" instead of "Tweety is flying"! What is happening here? It turns out the child class "Bird" does not pass the constructor parameters to the parent. So that is not a really ideal solution to this problem. We need to pass in the constructor object using apply().</p>

<p>``` javascript</p>

<pre><code>var Pet = function(name){
    this.name = name || "Snowy";

    this.move = function(){
        return alert(this.name + " is walking");
    }
}

function Bird(name){
    Pet.apply(this, arguments);
};

Bird.prototype = new Pet();
Bird.prototype.move = function(){
    return alert(this.name + " is flying");
}

var myBird = new Bird('Tweety');
myBird.move(); //Alerts 'Tweety is walking'
</code></pre>

<p>```</p>

<p>Now we got "Tweety" appearing in the move() method, but now the method is coming from the original Class; so instead of "Tweety is flying", we get "Tweety is walking". It turns out that we the method first looks inside of the parent class for the method before visiting the prototype.</p>

<p>``` javascript</p>

<pre><code>var Pet = function(name){
    this.name = name || "Snowy";
}

Pet.prototype.move = function(){
    return alert(this.name + " is walking");
}

function Bird(name){
    Pet.apply(this, arguments);
};

Bird.prototype = new Pet();
Bird.prototype.move = function(){
    return alert(this.name + " is flying");
}

var myBird = new Bird('tweety');
myBird.move(); //Alerts 'Tweety is flying'
</code></pre>

<p>```</p>

<p>We have moved the method of move() outside of Pet into a prototype function. This allows the method to be over-ridden by the Bird class.</p>

<p>Thats all for now, hope that was useful!</p>
]]></content>
  </entry>
  
</feed>
